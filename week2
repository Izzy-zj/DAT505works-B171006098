<!DOCTYPE html>
<html>
<head>
    <title>01.01 - WebGLRenderer - Skeleton</title>
    <script src="./build/three.js"></script>
    <script src="./libs/dat.gui.min.js"></script>
    <script src="./controls/TrackballControls.js"></script>
    <style>
    body{
        margin:0;
        padding:0;
        overflow: hidden;
    }
    #canvas3d{
        width:100%;
        height:100%;
    }
    </style>
</head>
<body>
    <div id="canvas3d">
    </div>
<script>

    var renderer;
    var scene;
    var camera;
    var light;
    var control;
    var pivotPoint;
    var camControl;

    function init() {
        scene = new THREE.Scene();

        camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);
        camControl = new THREE.TrackballControls(camera);

        camera.position.x = 35;
        camera.position.y = 20;
        camera.position.z = 15;
        camera.lookAt(scene.position);


        renderer = new THREE.WebGLRenderer({antialias:true});
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);
        //renderer.setSize('1000', '550');

        //地球
        var sphereGeometry = new THREE.SphereGeometry(7, 25, 25);
        var sphereMaterial = new THREE.MeshBasicMaterial();
        var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);

        sphere.position.x = 0;
        sphere.position.y = 1;
        sphere.position.z = 0;
        sphere.name = 'sphere';
        sphere.castShadow = true;


        scene.add(sphere);

        var texture = new THREE.ImageUtils.loadTexture("./地球 - 蓝星/map/1.jpg");
        sphereMaterial.map = texture;

        // 转轴
        pivotPoint = new THREE.Object3D();
        pivotPoint.rotation.x = 0.4;
        sphere.add(pivotPoint);

        //月球
        var sphereGeometrysml = new THREE.SphereGeometry(2, 25, 25);
        var sphereMaterialsml = new THREE.MeshBasicMaterial();
        var spheresml = new THREE.Mesh(sphereGeometrysml, sphereMaterialsml);

        spheresml.position.x = 10;
        spheresml.position.y = -2;
        spheresml.position.z = -10;
        spheresml.name = 'spheresml';
        spheresml.castShadow = true;


        pivotPoint.add(spheresml);

        var texturesml = new THREE.ImageUtils.loadTexture("./moon/aotu.tif");
        sphereMaterialsml.map = texturesml;

        //圆环
        var torusGeometry = new THREE.TorusGeometry(14.3,0.03,50,50);
        var torusMaterial = new THREE.MeshBasicMaterial({color:0xaaaaaa});
        var tours = new THREE.Mesh(torusGeometry,torusMaterial);
        tours.position.x = 0;
        tours.position.y = 0;
        tours.position.z = 0;
        tours.rotation.x = -20.6;
        tours.rotation.y = 0;
        tours.rotation.z = 0;
        tours.castShadow = true;
        tours.name = 'tours';
        pivotPoint.add(tours);


        //light
        light = new THREE.DirectionalLight(0xffffff, 1.0, 0);
        light.position.set( 200, 200, 200 );
        light.shadowMapEnabled = true;
        light.shadowCameraNear = 20;
        light.shadowCameraFar = 100;
        scene.add(light);


        document.getElementById('canvas3d').appendChild(renderer.domElement);


        control = new function (){
            this.rotationSpeedY = 0.01;
            this.sphereRotationSpeedY = 0.003;
            this.starRoitationSpeedZ = 0.001;
        }
        addControls(control);


        render();
    }

    function addControls(controlObject){
        var gui = new dat.GUI();
        gui.add(controlObject,'rotationSpeedY',-0.1,0.1);
    }

    function render() {
        renderer.render(scene, camera);

        pivotPoint.rotation.y += control.rotationSpeedY;

        //scene.getObjectByName('sphere').rotation.y += control.rotationSpeedY;
        scene.getObjectByName('sphere').rotation.y += control.sphereRotationSpeedY;
        scene.getObjectByName('spheresml').rotation.y += control.sphereRotationSpeedY;
        scene.getObjectByName('stars').rotation.y += control.starRoitationSpeedZ;

        camControl.update();
        requestAnimationFrame(render);
    }
		
    window.onload = init;

</script>

</body>
</html>

